; 3) Operaciones con Car√°cteres 
 
; Escribir un programa que lea un string, lo almacene en MENSAJE y convierta todos sus car√°cteres a min√∫scula.  Por 
; ejemplo, si MENSAJE contiene ‚ÄúHola, Buenas Tardes‚Äù, luego de la conversi√≥n debe contener ‚Äúhola, buenas tardes‚Äù. 
; Mostrar en pantalla el mensaje luego de la conversi√≥n. Para ello, debe implementar y utilizar las siguientes subrutinas: 
 
; 1.  üìÑ ES_MAYUS ‚≠ê
;   Recibe un car√°cter en el registro AL y retorna en AH el valor 0FFh si es may√∫scula y 0 de lo contrario.
;   Pista: Los c√≥digos de las may√∫sculas son todos consecutivos. Buscar en la tabla ASCII los caracteres may√∫scula, y observar qu√© valores ASCII tienen la ‚ÄòA‚Äô y  la ‚ÄòZ‚Äô. 
; 2.  üìÑ A_MINUS ‚≠ê
;   Recibe un car√°cter may√∫scula en AL y lo devuelve como min√∫scula.
;   Pista: Las may√∫sculas y las min√∫sculas est√°n en el mismo orden en el ASCII, y por ende la distancia entre, por ejemplo, la ‚ÄúA‚Äù y la ‚Äúa‚Äù es la misma que la distancia entre la ‚ÄúZ‚Äù y la ‚Äúz‚Äù. 
; 3.  üìÑ STRING_A_MINUS ‚≠ê‚≠ê
;   Recibe la direcci√≥n de comienzo de un string en BX,  su longitud en AL. 
;   Recorre el string, cambiando a min√∫scula las letras que sean may√∫sculas. 
;   No retorna nada, sino que modifica el string directamente en la memoria.

; 1) ----------------------------------------------------------------------------
org 1000h
    CARACTER db ?               ; Variable para almacenar el car√°cter le√≠do
    ES_MINUS db "es minuscula"  ; Mensaje para min√∫scula
    ES_MAYUS db "es mayuscula"  ; Mensaje para may√∫scula
    fin      db 0               ; Marca el final de los mensajes

org 2000h
    mov bx, offset CARACTER      ; BX apunta a la variable donde se guarda el car√°cter le√≠do
    int 6                        ; Lee un car√°cter desde teclado y lo guarda en CARACTER
    cmp byte ptr [bx], 'a'       ; ¬øEl car√°cter es menor que 'a'? (compara con ASCII 97)
    js es_mayuscula              ; Si es menor que 'a', es may√∫scula o s√≠mbolo

    es_minuscula:
        mov ah, 0                ; AH = 0, indica que NO es may√∫scula
        mov bx, offset ES_MINUS  ; BX apunta al mensaje "es minuscula"
        mov al, offset ES_MAYUS - offset ES_MINUS ; AL = longitud del mensaje "es minuscula"
        jmp imprimir

    es_mayuscula:
        mov ah, 0FFh             ; AH = 0FFh, indica que es may√∫scula
        mov bx, offset ES_MAYUS  ; BX apunta al mensaje "es mayuscula"
        mov al, offset fin - offset ES_MAYUS      ; AL = longitud del mensaje "es mayuscula"

    imprimir:
        int 7                    ; Imprime el mensaje en pantalla
        int 0                    ; Termina el programa
end

; 2) ----------------------------------------------------------------------------
org 1000h
    CARACTER db ?               ; Variable para almacenar el car√°cter le√≠do

org 2000h
    mov bx, offset CARACTER      ; BX apunta a la variable donde se guarda el car√°cter le√≠do
    int 6                        ; Lee un car√°cter desde teclado y lo guarda en CARACTER
    mov al, [bx]                 ; AL = car√°cter le√≠do desde memoria
    add al, 32                   ; Convierte a min√∫scula sumando 32 (solo si era may√∫scula) (En ASCII, 'a' - 'A' = 32)
    mov CARACTER, al             ; Guarda el car√°cter convertido en min√∫scula en memoria
    mov bx, offset CARACTER      ; BX apunta al car√°cter a imprimir
    mov al, 1                    ; AL = 1, cantidad de caracteres a imprimir
    int 7                        ; Imprime el car√°cter en pantalla
    int 0                    ; Termina el programa
end

; 3) ----------------------------------------------------------------------------
org 1000h
    MENSAJE db "Hola, Buenas Tardes"    ; String a convertir a min√∫scula
    fin     db 0                        ; Marca el final del string

org 2000h
    mov bx, offset MENSAJE              ; BX apunta al comienzo del string
    mov al, offset fin - offset MENSAJE ; AL = longitud del string

    loop:
        cmp byte ptr [bx], 'a'          ; ¬øEl car√°cter es menor que 'a'? (compara con ASCII 97)
        js es_mayuscula                 ; Si es menor que 'a', es may√∫scula o s√≠mbolo

        mov cl  , [bx]
        sub cl  , 32
        mov [bx], cl                    ; Convierte a min√∫scula sumando 32 (solo si era may√∫scula)(En ASCII, 'a' - 'A' = 32)
    
    es_mayuscula:
        inc bx
        dec al                          ; Decrementa el contador de longitud
        cmp al, 0                       ; ¬øQuedan caracteres por procesar?
        jnz loop

    ; imprimir el resultado
    mov bx, offset MENSAJE              ; BX apunta al comienzo del string
    mov al, offset fin - offset MENSAJE ; AL = longitud del string
    int 7

    int 0                               ; Termina el programa
end